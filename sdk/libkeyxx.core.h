/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "libkeyxx.core.go"
 #include <stdlib.h>

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void Init(int m_in, int n_in, int q_in, int p_in);
extern void InitCodeType(int ct);
extern void InitSerializeType(int st);
extern void InitStrCaseChangeMode(int scc);
extern void InitIsFastString(int iss);
extern char* SM3(char* input);
extern void LoadPrivKey(char* skbfile);
extern void LoadPubKey(char* pkbfile);
extern void LoadDictionary(char* dictbfile);
extern void LoadPrivKeyString(char* skbstring);
extern void LoadPubKeyString(char* pkbstring);
extern void LoadDictionaryString(char* dictbstring);
extern void LoadBiasKey(char* bkfile);
extern void LoadExKey(char* dictExbfile);
extern void LoadPrivkeyFloat(char* skffile);
extern void LoadDictionaryFloat(char* dictffile);
extern void LoadExpressionBlockKeys();
extern void LoadExpressionFloatKeys();
extern void InitExpression();
extern void ClearExpressionVariable();
extern void AddExpressionVariable(char* _name, char* _type, char* _value);
extern char* ExpressionCalculation(char* formula);
extern void GenSKB(int m, int n, int q, int p, char* filename);
extern void GenPKB(char* skbfile, char* filename);
extern void GenDictB(char* skbfile, char* filename, char* delta);
extern char* GenSKBString(int m, int n, int q, int p);
extern char* GenPKBString(char* skbfile);
extern char* GenDictBString(char* skbfile, char* delta);
extern void GenBK(int n, int q, int p, char* filename);
extern void GenDictExB(char* bkfile, char* pkbfile, char* dictbfile, char* filename);
extern void GenSKF(int p, char* filename);
extern void GenDictF(char* skffile, char* filename);
extern char* EncInt(int plain);
extern char* EncPubInt(int plain);
extern char* EncString(char* plain);
extern char* EncPubString(char* plain);
extern char* EncPubStringWithIndex(char* plain);
extern char* EncFloat(char* plain);
extern char* EncDouble(char* plain);
extern char* EncPubDouble(char* plain);
extern char* EncBinary(int plain, int l);
extern char* EncPubBinary(int plain, int l);
extern int DecInt(char* input);
extern char* DecFloat(char* input);
extern char* DecDouble(char* input);
extern char* Decrypt(char* input);
extern int DecBinary(char* input);
extern char* GenSign(char* input);
extern int VerifySign(char* input, char* sign);
extern char* AddCipherInt(char* c1, char* c2);
extern char* SubCipherInt(char* c1, char* c2);
extern char* MulCipherInt(char* c1, char* c2);
extern char* AddCipherFloat(char* c1, char* c2);
extern char* SubCipherFloat(char* c1, char* c2);
extern char* MulCipherFloat(char* c1, char* c2);
extern char* DivCipherFloat(char* c1, char* c2);
extern char* AddCipherDouble(char* c1, char* c2);
extern char* SubCipherDouble(char* c1, char* c2);
extern char* MulCipherDouble(char* c1, char* c2);
extern char* DivCipherDouble(char* c1, char* c2);
extern char* XORCipherBinary(char* c1, char* c2);
extern char* ANDCipherBinary(char* c1, char* c2);
extern char* ORCipherBinary(char* c1, char* c2);
extern char* NOTCipherBinary(char* c1);
extern char* ShiftLeftCipherBinary(char* c1, int _bias);
extern char* ShiftRightCipherBinary(char* c1, int _bias);
extern int CompareCipherInt(char* c1, char* c2);
extern int CompareCipherString(char* c1, char* c2);
extern int CompareCipherFloat(char* c1, char* c2);
extern int CompareCipherDouble(char* c1, char* c2);
extern char* ABSCipherFloat(char* c1);
extern char* PowCipherFloat(char* c1, int n);
extern char* SqrtCipherFloat(char* c1);
extern char* PowCipherFloat_FractionOrder(char* c1, int n, int m);
extern char* PowCipherFloat_RealOrder(char* c1, char* a);
extern char* LogCipherFloat(char* c1);
extern char* ExpCipherFloat(char* c1);
extern char* SinCipherFloat(char* c1);
extern char* CosCipherFloat(char* c1);
extern char* TanCipherFloat(char* c1);
extern char* ArcsinCipherFloat(char* c1);
extern char* ArccosCipherFloat(char* c1);
extern char* ArctanCipherFloat(char* c1);
extern char* SinhCipherFloat(char* c1);
extern char* CoshCipherFloat(char* c1);
extern char* TanhCipherFloat(char* c1);
extern char* ArcsinhCipherFloat(char* c1);
extern char* ArccoshCipherFloat(char* c1);
extern char* ArctanhCipherFloat(char* c1);
extern char* ABSCipherDouble(char* c1);
extern char* PowCipherDouble(char* c1, int n);
extern char* SqrtCipherDouble(char* c1);
extern char* PowCipherDouble_FractionOrder(char* c1, int n, int m);
extern char* PowCipherDouble_RealOrder(char* c1, char* a);
extern char* LogCipherDouble(char* c1);
extern char* ExpCipherDouble(char* c1);
extern char* SinCipherDouble(char* c1);
extern char* CosCipherDouble(char* c1);
extern char* TanCipherDouble(char* c1);
extern char* ArcsinCipherDouble(char* c1);
extern char* ArccosCipherDouble(char* c1);
extern char* ArctanCipherDouble(char* c1);
extern char* SinhCipherDouble(char* c1);
extern char* CoshCipherDouble(char* c1);
extern char* TanhCipherDouble(char* c1);
extern char* ArcsinhCipherDouble(char* c1);
extern char* ArccoshCipherDouble(char* c1);
extern char* ArctanhCipherDouble(char* c1);
extern char* ConcatString(char* data1, char* data2);
extern char* Substring(char* data, int start, int _end);
extern char* EncPubIntExtend(int plain);
extern char* EncPubStringExtend(char* plain);
extern char* TranEN(char* cipher);
extern char* TranStringEN(char* _cs);
extern char* DecStringNormal(char* _cs);
extern char* DecString(char* cs);
extern char* TranStringENMix(char* _cs);
extern char* AddByteExtend(char* cipher1, char* cipher2);
extern char* SubstractByteExtend(char* cipher1, char* cipher2);
extern char* MultiplyByteExtend(char* cipher1, char* cipher2);
extern char* EqualByteExtend(char* cipher1, char* cipher2);
extern char* CatCipherStringMix(char* _cs1, char* _cs2);
extern char* EqualStringExtend(char* _cs1, char* _cs2);
extern void FreePoint(void* cs);
extern int IsCipher(char* cipherstr);
extern int IsCipherInt(char* cipherstr);
extern int IsCipherFloat(char* cipherstr);
extern int IsCipherDouble(char* cipherstr);
extern int IsCipherString(char* cipherstr);
extern int IsCipherStringWithIndex(char* cipherstr);
extern int CompareStringWithIndex(char* c1, char* c2, int max);
extern char* EncStringWithIndex(char* c1);
extern char* DecStringWithIndex(char* input);

#ifdef __cplusplus
}
#endif
